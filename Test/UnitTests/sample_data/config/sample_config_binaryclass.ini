[General]
use_cuda        = True
run_mode        = train
run_type        = BinaryClassification
plot_tb         = True
fold_code       = B00
log_dir         = ./Backup/Log/sample_${fold_code}-v${version}.log
version         = 1.0
;force_train_data= No

# Controlled in main.py
[Checkpoint]
cp_save_dir = ./sample_classification_${General:fold_code}_VNet-v${General:version}.pt
cp_load_dir = ./sample_classification_${General:fold_code}_VNet-v${General:version}.pt

# Controlled in main.py
[Network]
network_type = SlicewiseAttentionRAN(1, 1)

# Controlled in solver/inferencer
[RunParams]
batch_size          = 2

# Controlled in main.py
[Data]
target_dir           = ./sample_data/sample_class_gt.csv
prob_map_dir         = ./sample_data/seg
output_dir           = ./sample_data/output
input_dir            = ./sample_data/img
validation_input_dir = ./sample_data/img
validation_gt_dir    = ./sample_data/sample_class_gt.csv

# Data loading filter, controlled by PMI_data_loader
[Filters]
re_suffix            = (.*)
validation_re_suffix = (.*)
validation_id_list   = ./sample_data/config/sample_id_setting.txt

# Controlled in PMI_data_loader
[LoaderParams]
PMI_datatype_name   = PMIImageFeaturePair
data_types          = float-uint8
idGlobber           = ^[\w_\d]+
augmentation        = ./sample_data/config/sample_transform.yaml

[SolverParams]
unpack_keys_forward   = ['input', 'gt']
unpack_keys_inference = ['input']
gt_keys               = ['gt']
class_weights         = 1.5
sigmoid_params        = {'delay': 5, 'stretch' : 1  , 'cap': 0.2}
optimizer_type        = Adam
initial_weight        = 1
learning_rate         = 1E-3
momentum              = 0.95
num_of_epochs         = 150
decay_rate_lr         = 0.99
decay_on_plateau      = False
lr_scheduler_dict     = {'cooldown': 10, 'patience': 15}
early_stop            = {'method'  : 'validation_loss_reference'}

