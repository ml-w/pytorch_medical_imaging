- config: default-flags
  flags:
    config: "./Configs/Test.ini"
    epoch: 50
    batch-size: 4
    lr: 1E-4
    debug: no
    fold-code: ""
    network: ""
    override: ""

- config: val-flags
  flags:
    batch-size: 4
    config: "./Configs/Test.ini"
    fold-code: ""
    override: ""
    network: ""
    debug: no

- model: pmi
  params:
    rAI_config: "./Configs/BM_LargerStudy/BM_rAIdiologist_nyul_v2.ini"
    rAI_focal_config: "./Configs/BM_LargerStudy/BM_rAIdiologist_focal_v2.ini"
    swran_config: "./Configs/BM_LargerStudy/BM_rAIdiologist_stage0_v2.ini"
  operations:
    train:
      description: Train a model.
      main: pytorch_med_imaging.main
      flags:
        $include: default-flags
      sourcecode:
        - exclude:
            dir: 'Backup'
      output-scalars:
        training/loss: 'EpochLoss: (\value)'
        accuracy: 'ACC: (\value)'
        training/validation_loss: 'VAL: (\value)'
        step: 'Epoch (\step)'
        training/step_lr: 'LR: (\value)'
      requires:
        - default

    train_focal:
      decription: Traing focal model for rAIdiologist
      main: pytorch_med_imaging.main
      flags:
        config: "{{rAI_focal_config}}"
        epoch: 50
        batch-size: 4
        lr: 1E-4
        debug: no
        override: ""
      sourcecode:
        - exclude:
            dir: 'Backup'
      output-scalars:
        training/loss: 'EpochLoss: (\value)'
        accuracy: 'ACC: (\value)'
        training/validation_loss: 'VAL: (\value)'
        step: 'Epoch (\step)'
        training/step_lr: 'LR: (\value)'
      requires:
        - default
        - file: '../Backup'
          select: 'BM_rAI_focal_pretrained_.*-vv2\.0-sv3\.pt'
          target-path: 'Backup'
          target-type: 'copy'
          fail-if-empty: 'yes'

    train_rAI:
      description: Train a model.
      main: pytorch_med_imaging.main
      flags:
        $include: default-flags
      sourcecode:
        - exclude:
            dir: 'Backup'
      output-scalars:
        training/loss: 'EpochLoss: (\value)'
        accuracy: 'ACC: (\value)'
        training/validation_loss: 'VAL: (\value)'
        step: 'Epoch (\step)'
        training/step_lr: 'LR: (\value)'
      requires:
        - default
        - file: '../Backup'
          select: 'BM_rAIPretrain_.*'
          target-path: 'Backup'
          target-type: 'copy'
          fail-if-empty: 'yes'

    train_looped:
      description: Train a model in a looped fashion. Suitable when the model needs a recipe of hyperparameters.
      main: pytorch_med_imaging.main
      flags:
        $include: default-flags
      sourcecode:
        - exclude:
            dir: 'Backup'
      output-scalars:
        training/loss: 'EpochLoss: (\value)'
        ACC: 'ACC: (\value)'
        training/validation_loss: 'VAL: (\value)'
        step: 'Epoch (\step)'
        training/step_lr: 'LR: (\value)'
      compare:
        - lr
        - accuracy
      requires:
        - default
        - operation: train
          select: 'Backup'
          fail-if-empty: no

    train_segment:
      description: Train a model for segmentation.
      main: pytorch_med_imaging.main
      flags:
        $include: default-flags
      output-scalars:
        loss/loss: 'EpochLoss: (\value)'
        loss/validation_loss: 'VAL: (\value)'
        step: 'Epoch (\step)'
        step_lr: 'LR: (\value)'
        perf/dsc: 'DSC: (\value)'
      compare:
        - lr
        - perf/dsc as dice
      sourcecode:
        - exclude:
            dir: 'Backup'
      requires:
        - default

    train_survival:
      description: Train a model.
      main: pytorch_med_imaging.main
      flags:
        $include: default-flags
      output-scalars:
        perf/validation_c-index: 'VAL C-index: (\value)'
        perf/training_c-index: 'Training C-index: (\value)'
      sourcecode:
        - exclude:
            dir: 'Backup'
      requires:
        - default

    validation:
      decription: Validate the trained model. Should be used in pipeline, otherwise it won't find the checkpoint.
      main: pytorch_med_imaging.main --inference
      flags:
        $include: val-flags
      requires:
        - default
        - operation: train
          select: 'Backup'
      output-scalars:
        sensitivity: 'Sensitivity: (\value)'
        specificity: 'Specificity: (\value)'
        PPV: 'PPV: (\value)'
        NPV: 'NPV: (\value)'
        ACC: 'OverallACC: (\value)'
      compare:
        - sensitivity as sens
        - specificity as spec
        - ACC

    validation_segment:
      decription: Validate the trained model. Should be used in pipeline, otherwise it won't find the checkpoint.
      main: pytorch_med_imaging.main --inference
      flags:
        $include: val-flags
      requires:
        - default
        - operation: train_segment
          select: 'Backup'
      output-scalars:
        DSC: 'Avg_DICE: (\value)'
        med_DSC: 'Med_DICE: (\value)'

    validation_survival:
      decription: Validate the trained model. Should be used in pipeline, otherwise it won't find the checkpoint.
      main: pytorch_med_imaging.main --inference
      flags:
        $include: val-flags
      requires:
        - default
        - operation: train_survival
          select: 'Backup'
      output-scalars:
        C-index: 'C-index: (\value)'

    recipe_rAIdiologist:
      description:
        "This recipe requires two config files, one trains the SWRAN and the other train rAIdiologist."
      flags:
        network: "rAIdiologist(1)"
        config: "{{rAI_config}}"
        config_stage0: '{{swran_config}}'
        fold_code: "B00"
        bs_swran: 8
        bs_cnn: 4
        bs_rnn: 24
        debug: no
      steps:
        - train        config=${config_stage0} epoch=200 debug=${debug} batch-size=${bs_swran} lr=1E-4
          override="(General,fold_code)=${fold_code}"
#        - train_rAI config=${config} epoch=50  debug=${debug} batch-size=${bs_rnn} lr=1E-4
#          override="(SolverParams,rAI_fixed_mode)=1;(General,fold_code)=${fold_code}" network=${network}
#        - train_looped config=${config} epoch=50  debug=${debug} batch-size=${bs_cnn} lr=1E-4
#          override="(SolverParams,rAI_fixed_mode)=2;(General,fold_code)=${fold_code}" network=${network}
        - train_looped config=${config} epoch=50  debug=${debug} batch-size=${bs_rnn} lr=1E-4
          override="(SolverParams,rAI_fixed_mode)=3;(General,fold_code)=${fold_code}" network=${network}
        - train_looped config=${config} epoch=100 debug=${debug} batch-size=${bs_cnn} lr=1E-4
          override="(SolverParams,rAI_fixed_mode)=4;(General,fold_code)=${fold_code}" network=${network}
        - validation   config=${config} debug=${debug} batch-size=${bs_cnn} override="(General,fold_code)=${fold_code}"
          network=${network}


    pipeline:
      flags:
        $include: default-flags
      steps:
        - train config=${config} epoch=${epoch} batch-size=${batch-size} lr=${lr} override=${override} network=${network} fold-code=${fold-code}
        - validation config=${config} batch-size=${batch-size} override=${override} network=${network} fold-code=${fold-code}

    pipeline_segment:
      flags:
        $include: default-flags
      steps:
        - train_segment config=${config} epoch=${epoch} batch-size=${batch-size} lr=${lr} override=${override} network=${network} fold-code=${fold-code}
        - validation_segment config=${config} batch-size=${batch-size} override="${override};(LoaderParams,random_patches)=75" network=${network} fold-code=${fold-code}

    pipeline_survival:
      flags:
        $include: default-flags
      steps:
        - train_survival config=${config} epoch=${epoch} batch-size=${batch-size} lr=${lr} override=${override} network=${network} fold-code=${fold-code}
        - validation_survival config=${config} batch-size=${batch-size} override=${override} network=${network} fold-code=${fold-code}

  output-scalars:
    classification:
      - loss/loss: 'EpochLoss: (\value)'
      - accuracy: 'ACC: (\value)'
      - loss/validation_loss: 'VAL: (\value)'
      - step: 'Epoch (\step)'
      - step_lr: 'LR: (\value)'

    classification-infer:
      - sensitivity: 'Sensitivity: (\value)'
      - specificity: 'Specificity: (\value)'
      - PPV: 'PPV: (\value)'
      - NPV: 'NPV: (\value)'
      - ACC: 'OverallACC: (\value)'

  sourcecode:
    root: ../
    select:
      - exclude:
          dir: 'NPC_Segmentation'
      - exclude:
          dir: '__pycache__'
      - exclude:
          dir: "Guildai"
      - '*.py'
      - '*.pyx'
      - '*.txt'
      - '*.so'
  resources:
    default:
      - file: '../Configs'
      - file: '../NPC_Segmentation'
      - file: '../Sinus'
      - file: '../SCC'
      - file: '../Backup/Log'

    checkpoint-space:
      target-path: Backup
      target-type: link
